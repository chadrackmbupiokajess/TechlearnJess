# Generated by Django 5.1.5 on 2025-08-03 08:04

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icône (classe CSS)')),
                ('color', models.CharField(default='#3B82F6', max_length=7, verbose_name='Couleur')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('order', models.IntegerField(default=0, verbose_name="Ordre d'affichage")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(verbose_name='Question')),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Choix multiple'), ('true_false', 'Vrai/Faux'), ('text', 'Texte libre')], max_length=20, verbose_name='Type')),
                ('points', models.PositiveIntegerField(default=1, verbose_name='Points')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Ordre')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'ordering': ['quiz', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('description', models.TextField(verbose_name='Description')),
                ('short_description', models.CharField(max_length=300, verbose_name='Description courte')),
                ('thumbnail', models.ImageField(upload_to='courses/thumbnails/', verbose_name='Miniature')),
                ('video_intro', models.URLField(blank=True, verbose_name="Vidéo d'introduction")),
                ('difficulty', models.CharField(choices=[('beginner', 'Débutant'), ('intermediate', 'Intermédiaire'), ('advanced', 'Avancé')], default='beginner', max_length=20, verbose_name='Difficulté')),
                ('duration_hours', models.PositiveIntegerField(verbose_name='Durée (heures)')),
                ('language', models.CharField(default='fr', max_length=10, verbose_name='Langue')),
                ('is_free', models.BooleanField(default=False, verbose_name='Gratuit')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Prix (USD)')),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('published', 'Publié'), ('archived', 'Archivé')], default='draft', max_length=20, verbose_name='Statut')),
                ('is_published', models.BooleanField(default=False, verbose_name='Publié')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Mis en avant')),
                ('prerequisites', models.TextField(blank=True, verbose_name='Prérequis')),
                ('learning_objectives', models.TextField(verbose_name="Objectifs d'apprentissage")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.category', verbose_name='Catégorie')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Formateur')),
            ],
            options={
                'verbose_name': 'Cours',
                'verbose_name_plural': 'Cours',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_at', models.DateTimeField(auto_now_add=True, verbose_name="Date d'inscription")),
                ('is_completed', models.BooleanField(default=False, verbose_name='Terminé')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de fin')),
                ('progress_percentage', models.PositiveIntegerField(default=0, verbose_name='Progression (%)')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='courses.course', verbose_name='Cours')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Inscription',
                'verbose_name_plural': 'Inscriptions',
                'ordering': ['-enrolled_at'],
                'unique_together': {('user', 'course')},
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('slug', models.SlugField(verbose_name='Slug')),
                ('lesson_type', models.CharField(choices=[('video', 'Vidéo'), ('text', 'Texte'), ('quiz', 'Quiz'), ('assignment', 'Devoir')], default='video', max_length=20, verbose_name='Type')),
                ('content', models.TextField(blank=True, verbose_name='Contenu texte')),
                ('video_url', models.URLField(blank=True, verbose_name='URL vidéo')),
                ('duration_minutes', models.PositiveIntegerField(default=0, verbose_name='Durée (minutes)')),
                ('attachments', models.FileField(blank=True, upload_to='courses/attachments/', verbose_name='Fichiers joints')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Ordre')),
                ('is_preview', models.BooleanField(default=False, verbose_name='Aperçu gratuit')),
                ('is_published', models.BooleanField(default=True, verbose_name='Publié')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='courses.course', verbose_name='Cours')),
            ],
            options={
                'verbose_name': 'Leçon',
                'verbose_name_plural': 'Leçons',
                'ordering': ['course', 'order'],
                'unique_together': {('course', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.CharField(max_length=200, verbose_name='Réponse')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Réponse correcte')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Ordre')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='courses.question', verbose_name='Question')),
            ],
            options={
                'verbose_name': 'Réponse',
                'verbose_name_plural': 'Réponses',
                'ordering': ['question', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('passing_score', models.PositiveIntegerField(default=70, verbose_name='Score de réussite (%)')),
                ('time_limit_minutes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Limite de temps (minutes)')),
                ('max_attempts', models.PositiveIntegerField(default=3, verbose_name='Nombre max de tentatives')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('lesson', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='courses.lesson', verbose_name='Leçon')),
            ],
            options={
                'verbose_name': 'Quiz',
                'verbose_name_plural': 'Quiz',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='courses.quiz', verbose_name='Quiz'),
        ),
        migrations.CreateModel(
            name='LessonProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Terminé')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de fin')),
                ('time_spent_minutes', models.PositiveIntegerField(default=0, verbose_name='Temps passé (minutes)')),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.enrollment', verbose_name='Inscription')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.lesson', verbose_name='Leçon')),
            ],
            options={
                'verbose_name': 'Progression de leçon',
                'verbose_name_plural': 'Progressions de leçons',
                'unique_together': {('enrollment', 'lesson')},
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], verbose_name='Note')),
                ('title', models.CharField(max_length=100, verbose_name='Titre')),
                ('content', models.TextField(verbose_name='Commentaire')),
                ('is_approved', models.BooleanField(default=True, verbose_name='Approuvé')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='courses.course', verbose_name='Cours')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Avis',
                'verbose_name_plural': 'Avis',
                'ordering': ['-created_at'],
                'unique_together': {('course', 'user')},
            },
        ),
    ]
