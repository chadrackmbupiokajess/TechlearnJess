# Generated by Django 5.1.5 on 2025-08-03 23:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='question',
            name='explanation',
            field=models.TextField(blank=True, verbose_name='Explication de la réponse'),
        ),
        migrations.AddField(
            model_name='question',
            name='text_answer_keywords',
            field=models.TextField(blank=True, verbose_name='Mots-clés attendus (séparés par des virgules)'),
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.PositiveIntegerField(verbose_name='Numéro de tentative')),
                ('status', models.CharField(choices=[('in_progress', 'En cours'), ('completed', 'Terminé'), ('time_expired', 'Temps expiré')], default='in_progress', max_length=20, verbose_name='Statut')),
                ('score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score (%)')),
                ('total_points', models.PositiveIntegerField(default=0, verbose_name='Points totaux possibles')),
                ('earned_points', models.PositiveIntegerField(default=0, verbose_name='Points obtenus')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Commencé à')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Terminé à')),
                ('time_spent_seconds', models.PositiveIntegerField(default=0, verbose_name='Temps passé (secondes)')),
                ('is_passed', models.BooleanField(default=False, verbose_name='Réussi')),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.enrollment', verbose_name='Inscription')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='courses.quiz', verbose_name='Quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Tentative de quiz',
                'verbose_name_plural': 'Tentatives de quiz',
                'ordering': ['-started_at'],
                'unique_together': {('user', 'quiz', 'attempt_number')},
            },
        ),
        migrations.CreateModel(
            name='StudentAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_answer', models.TextField(blank=True, verbose_name='Réponse texte')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Réponse correcte')),
                ('points_earned', models.PositiveIntegerField(default=0, verbose_name='Points obtenus')),
                ('answered_at', models.DateTimeField(auto_now_add=True, verbose_name='Répondu à')),
                ('time_spent_seconds', models.PositiveIntegerField(default=0, verbose_name='Temps passé sur cette question')),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_answers', to='courses.quizattempt', verbose_name='Tentative')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.question', verbose_name='Question')),
                ('selected_answers', models.ManyToManyField(blank=True, to='courses.answer', verbose_name='Réponses sélectionnées')),
            ],
            options={
                'verbose_name': "Réponse d'étudiant",
                'verbose_name_plural': "Réponses d'étudiants",
                'ordering': ['question__order'],
                'unique_together': {('attempt', 'question')},
            },
        ),
    ]
